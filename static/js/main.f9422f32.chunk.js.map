{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","sortField","setSortField","isReversed","setIsReversed","preparedGoods","goods","isReverse","sort","good1","good2","length","name","localeCompare","reverse","getPreparedGoods","className","onClick","type","cn","map","indexOf","ReactDOM","render","document","getElementById"],"mappings":"6KAmBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,K,YAAAA,E,iBAAAA,M,KAgCE,IAAME,EAAgB,WAC3B,MAAkCC,mBAAS,IAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAAoCF,oBAAS,GAA7C,mBAAOG,EAAP,KAAmBC,EAAnB,KAEMC,EA/BR,SACEC,EACAL,EACAM,GAEA,IAAMF,EAAa,YAAOC,GAmB1B,OAjBAD,EAAcG,MAAK,SAACC,EAAOC,GACzB,OAAQT,GACN,KAAKJ,EAASc,OACZ,OAAOF,EAAME,OAASD,EAAMC,OAE9B,KAAKd,EAASe,KACZ,OAAOH,EAAMI,cAAcH,GAE7B,QACE,OAAO,MAITH,GACFF,EAAcS,UAGTT,EAOeU,CACpBjB,EACAG,EACAE,GAQF,OACE,sBAAKa,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,QAAS,kBAAMf,EAAaL,EAASe,OACrCM,KAAK,SACLF,UAAS,yBAAoBf,IAAcJ,EAASe,MAAQ,YAH9D,iCAQA,wBACEM,KAAK,SACLF,UAAS,4BAAuBf,IAAcJ,EAASc,QAAU,YACjEM,QAAS,kBAAMf,EAAaL,EAASc,SAHvC,4BAQA,wBACEO,KAAK,SACLF,UAAWG,IAAG,oBAAqB,CAAE,YAAahB,IAClDc,QAAS,kBAAMb,GAAeD,IAHhC,sBAQEF,GAAaE,IACb,wBACEc,QAlCI,WACZf,EAAa,IACbE,GAAc,IAiCNc,KAAK,SACLF,UAAU,4BAHZ,sBAUJ,6BACGX,EAAce,KAAI,SAAAd,GAAK,OACtB,oBAAI,UAAQ,OAAZ,SAAuDA,GAA/BD,EAAcgB,QAAQf,aCvGxDgB,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.f9422f32.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport cn from 'classnames';\n\nimport 'bulma/css/bulma.css';\nimport './App.scss';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  name = 'name',\n  length = 'length',\n}\n\nfunction getPreparedGoods(\n  goods: string[],\n  sortField: string,\n  isReverse: boolean,\n): string[] {\n  const preparedGoods = [...goods];\n\n  preparedGoods.sort((good1, good2) => {\n    switch (sortField) {\n      case SortType.length:\n        return good1.length - good2.length;\n\n      case SortType.name:\n        return good1.localeCompare(good2);\n\n      default:\n        return 0;\n    }\n  });\n\n  if (isReverse) {\n    preparedGoods.reverse();\n  }\n\n  return preparedGoods;\n}\n\nexport const App: React.FC = () => {\n  const [sortField, setSortField] = useState('');\n  const [isReversed, setIsReversed] = useState(false);\n\n  const preparedGoods = getPreparedGoods(\n    goodsFromServer,\n    sortField,\n    isReversed,\n  );\n\n  const reset = () => {\n    setSortField('');\n    setIsReversed(false);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          onClick={() => setSortField(SortType.name)}\n          type=\"button\"\n          className={`button is-info ${sortField !== SortType.name && 'is-light'}`}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          className={`button is-success ${sortField !== SortType.length && 'is-light'}`}\n          onClick={() => setSortField(SortType.length)}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          className={cn('button is-warning', { 'is-light': !isReversed })}\n          onClick={() => setIsReversed(!isReversed)}\n        >\n          Reverse\n        </button>\n\n        {(sortField || isReversed) && (\n          <button\n            onClick={reset}\n            type=\"button\"\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {preparedGoods.map(goods => (\n          <li data-cy=\"Good\" key={preparedGoods.indexOf(goods)}>{goods}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}